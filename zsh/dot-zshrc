export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'
export EDITOR="$(command -v nvim)"
export TERMINAL="$(command -v kitty)"
export BROWSER="$(command -v google-chrome-stable)"
export PAGER="$(command -v nvimpager)"
export PATH=$PATH:~/.local/bin
export PATH=$PATH:~/endorsement/bin
export PATH=~/.npm-global/bin:$PATH
export PATH=~/.yarn/bin:$PATH
export PATH=~/.local/share/gem/ruby/3.0.0/bin:$PATH

export LANG=en_US.UTF-8

source "/home/flocks/ohmyzsh/oh-my-zsh.sh"

plugins=()

source "/usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
CASE_SENSITIVE="true"

#fzf
FZF_HOME=/usr/share/fzf
source "$FZF_HOME/completion.zsh"
source "$FZF_HOME/key-bindings.zsh"
export FZF_DEFAULT_COMMAND='rg --files --follow'
export FZF_CTRL_T_COMMAND='rg --files --follow 2>/dev/null'
export FZF_ALT_C_COMMAND="fd --type directory"
export FZF_DEFAULT_OPTS="-m --bind ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all"

# export FZF_DEFAULT_COMMAND="'find . -type f' fzf --bind 'ctrl-d:reload(find . -type d),ctrl-f:reload(eval "$FZF_DEFAULT_COMMAND")' --height=50% --layout=reverse"


#ssh
if [ -z "$SSH_AUTH_SOCK" ] ; then
  echo "> Starting ssh-agent"
  eval $(ssh-agent -s)
fi

if [ -n "$DISPLAY" ] && ! ssh-add -l >/dev/null; then
  ssh-add
fi

source "$HOME/.alias"
source "$HOME/.path"
source "$HOME/.gitprompt"
source "$HOME/.prompt"
source "$HOME/.private"

#
# useful for pinentry-tty prompt
export GPG_TTY="$(tty)"

pb-kill-line () {
  zle kill-line
  echo -n $CUTBUFFER | xclip -selection c
}

pb-copy-region-as-kill-deactivate-mark () {
  zle copy-region-as-kill
  zle set-mark-command -n -1
  echo -n $CUTBUFFER | xclip -selection c
}

wrap() {
	BUFFER=" \$($BUFFER)";
	zle beginning-of-line;
}

wrapProcess() {
	BUFFER=" <($BUFFER)";
	zle beginning-of-line;
}

wrapQuickfix() {
	BUFFER="nvim -q <($BUFFER)";
	zle beginning-of-line;
}

wrapQuote() {
	BUFFER="\"$BUFFER\"";
	zle beginning-of-line;
}

dir() {
  dir=$(find -type d | rg -v "node_modules|.git" |  fzf)
	BUFFER="$BUFFER $dir"
	CURSOR=$(($CURSOR + $#dir + 1))
}

insert_branch() {
  branch=$(git branch | fzf | awk '{print $1}')
	BUFFER="$BUFFER $branch"
	CURSOR=$(($CURSOR + $#branch + 1))
}

insert_modified_file() {
  file=$(git status --short | awk '{print $2}' | fzf)
	BUFFER="$BUFFER $file"
	CURSOR=$(($CURSOR + $#file + 1))
}

insert_vault_instance() {
  vault=$(curl -s https://remote.minivault.ledger-sbx.com/api/instances | jq  -r '.[].name' | fzf | awk '{print "https://"$1".minivault.ledger-sbx.com"}')
	BUFFER="$BUFFER $vault"
	CURSOR=$(($CURSOR + $#vault + 1))
}

lh () {
	/bin/ls -1th | head -n ${1-1}
}

bindkey -e
zle -N pb-kill-line
zle -N pb-copy-region-as-kill-deactivate-mark
zle -N wrapQuickfix
zle -N wrapProcess
zle -N wrap
zle -N wrapQuote
zle -N dir
zle -N insert_branch
zle -N insert_modified_file
zle -N insert_vault_instance
zle -N edit-command-line
bindkey '^K'   pb-kill-line
bindkey '^w'   pb-copy-region-as-kill-deactivate-mark

autoload -z edit-command-line
bindkey "^X^E" edit-command-line

bindkey "^[q" wrapQuickfix
bindkey "^[$" wrap
bindkey "^[\<" wrapProcess
bindkey "^[\"" wrapQuote
bindkey "^[B" insert_branch
bindkey "^[T" insert_modified_file
bindkey "^[V" insert_vault_instance

# proto
# export PROTO_ROOT="$HOME/.proto"
# export PATH="$PROTO_ROOT/bin:$PATH"
